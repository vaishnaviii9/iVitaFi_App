//debit case
       if (
           this.showDebit === true &&
           this.debitVerificationErrorMessage === null &&
           f.valid &&
           this.debitExpirationMonthError !== true &&
           this.debitExpirationYearError !== true
       ) {
           var checkCardNumber = this.customerPaymentMethodsList.filter(
               (item) => "cardNumber" in item
           );
           var record = checkCardNumber.filter((m) => m.cardNumber !== null);
           if (record !== null && record.length > 1 && this.unMaskedCard != null && this.unMaskedCard !== undefined)
               this.cardNumber1 = this.unMaskedCard;
           var isDuplicate1 = this.customerPaymentMethodsList.filter(
               (a) =>
                   a.cardNumber === this.obj2.cardNumber &&
                   a.isDisabled === false
           );
           if (isDuplicate1.length > 0) {
               this.isPostAutopay = false;
               this.disabledSubmit = false;
               return this.notification.error(
                   "Card Number  Already exists.",
                   "Error!"
               );
           }  
           const paymentMethResp =
               await this.creditAccountService.UpdateCreditAccountPaymentMethodWithDefaultPaymentMethodAsync(
                   this.result?.detail?.creditAccountId,
                   this.obj2,
                   0,
                   this.isDefaultPaymentMethod
               );
           if (this.accountSummary.currentBalance === 0) {
               this.disabledSubmit = true;
           }
           if (paymentMethResp.type === "data") {
               this.updateCreditAccountSummary.emit(true);
               // this.notification.success('Payment Method was successfully saved.', 'Success!');
               this.success = true;
               await this.savePaymentAddNote(this.obj2.paymentMethodType);

               await this.initialLoadAccountSummary();
               this.customerDataService.accountSummary.subscribe((data) => {
                   this.accountSummary = data;
               });

               this.notification.success('Payment method added successfully');
               this.disabledSubmit=false;
               this.payments=[]
               this.loadingPayments=true;
               this.customerPaymentMethodsList=[];
               await this.getSavedPaymentMethods();
               this.payments=this.payments;
               this.loadingPayments=false;
           }

            else if (paymentMethResp.response.errorCode == ErrorCode.AdminPaymentMethodVerificationFailed) {
                this.isPostAutopay = false;
                this.disabledSubmit = false;
                this.notification.error(paymentMethResp.response.errorMessage);
                return;
            }
            else {
                this.success = false;
                this.isPostAutopay = false;
                this.disabledSubmit = false;
                this.notification.error(
                    "There was an error while adding the payment method.",
                    "Error!"
                );
                return;
            }

            this.disabledSubmit = false;
            this.isPostAutopay = false;
        } 
        
        
        
//ach

        else if (
            this.debitVerificationErrorMessage === null && this.showAch===true
        ) {
            if (this.showAch === true) {
                var isDuplicate1 = this.customerPaymentMethodsList.filter(
                    (a) =>
                        a.accountNumber === this.obj2.accountNumber &&
                        a.isDisabled === false
                );
                if (isDuplicate1.length > 0) {
                    this.isPostAutopay = false;
                    this.disabledSubmit = false;
                    return this.notification.error(
                        "Account Number  Already exists.",
                        "Error!"
                    );
                }
            }
             const paymentMethResp =
                await this.creditAccountService.UpdateCreditAccountPaymentMethodWithDefaultPaymentMethodAsync(
                    this.result?.detail?.creditAccountId,
                    this.obj2,
                    0,
                    this.isDefaultPaymentMethod
                );
            if (this.accountSummary.currentBalance === 0) {
                this.disabledSubmit = true;
            }
            if (paymentMethResp.type === "data") {
                this.success = true;
                this.paymentVerified = true;
                this.updateCreditAccountSummary.emit(true);
                // this.notification.success('Payment Method was successfully saved.', 'Success!');
                await this.savePaymentAddNote(this.obj2.paymentMethodType);
                this.payments=[]
                this.loadingPayments=true;
                this.customerPaymentMethodsList=[];
                    this.disabledSubmit=true;
             
                await this.initialLoadAccountSummary();
                this.customerDataService.accountSummary.subscribe((data) => {
                    this.accountSummary = data;
                });

                await this.getSavedPaymentMethods();
                this.payments=this.payments;
                this.loadingPayments=false;

                this.notification.success('Payment method added successfully');

            }
            else if (paymentMethResp.response.errorCode === ErrorCode.CustomerMaxMethodAdded) {
                this.isPostAutopay = false;
                this.disabledSubmit = false;
                this.notification.error('Maximum number of payment methods reached! Please delete a payment method and try again.', 'Error!');
                if(this.showAch===true){
                    this.routingNumber1='';
                    this.accountNumber1='';
                    this.isDefaultPaymentMethod=false;
                    this.setpaymentVerifiedToNull();
                    }
                return;

            }
            else if (paymentMethResp.response.errorCode == ErrorCode.AdminPaymentMethodVerificationFailed) {

                this.paymentVerified = false;
                this.success = false;
                this.disabledSubmit = false;
                this.notification.error('Please enter a valid routing number and account number.');
                return;
            }
            else {
                this.success = false;
                this.notification.error(
                    "There was an error while adding the payment method.",
                    "Error!"
                );
            }

            this.disabledSubmit = false;
            this.isPostAutopay = false;
        }
        if(this.showAch===true){this.routingNumber1=null;
        this.accountNumber1=null;
        }
        if(this.showDebit===true){
            this.cardNumber1 = null;
            this.securityCode1 = null;
            this.firstNameOnCard = null;
            this.lastNameOnCard = null;
            this.expirationYear = null;
             this.expirationMonth = null;
            this.debitZip=null;
            this.year = null;
            this.expirationLabel = null;
            this.debitExpirationYearError=false;
            this.debitExpirationMonthError=false;
            this.submitted=true;
        }
       this.year = 'Select';
       this.expirationLabel='Select'
//        f.controls['dropdown'].markAsDirty();
// f.controls['dropdown'].markAsTouched();

        this.submitted=true;       this.isDefaultPaymentMethod=false;
        this.setpaymentVerifiedToNull();
        // await this.checkAutoPayOnOff();
        this.isPostAutopay = false;
        this.firstNameOnCard = "";
        this.lastNameOnCard = "";
        // this.loading.complete();
        this.accountSummary = JSON.parse(
            sessionStorage.getItem("accountSummary")
        );

        this.tempAccountSummery = JSON.parse(
            sessionStorage.getItem("accountSummary")
        );
        this.disabledSubmit = false;
        this.paymentDetails = this.accountSummary.paymentMethod;
        this.result = this.accountSummary;
        // if (payments.name.includes("Card")) this.maskCard();
        if (this.cardNumber1 !== undefined)
            this.cardNumber1 = this.maskedCard;
        this.payments = [];

        await this.getSavedPaymentMethods();
        this.payments = this.payments;
        this.updatedPaymentList.emit(this.payments)

    }
 